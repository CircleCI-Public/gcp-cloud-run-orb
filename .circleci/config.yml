version: 2.1

# add your orb below, to be used in integration tests (note: a @dev:alpha
# release must exist; you'll need to publish manually at least once)
# you can use scripts/publish-alpha.sh to publish a @dev:alpha release
#trigger run
orbs:
  cloudrun: circleci/gcp-cloud-run@<<pipeline.parameters.dev-orb-version>>
  orb-tools: circleci/orb-tools@10.0

# Pipeline Parameters
## These parameters are used internally by orb-tools. Skip to the Jobs section.
parameters:
  run-integration-tests:
    description: An internal flag to prevent integration test from running before a development version has been created.
    type: boolean
    default: false
  dev-orb-version:
    description: >
      The development version of the orb to test.
      This value is automatically adjusted by the "trigger-integration-tests-workflow" job to correspond with the specific version created by the commit and should not be edited.
      A "dev:alpha" version must exist for the initial pipeline run.
    type: string
    default: "dev:alpha"

jobs:
  integration_test_gke:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - cloudrun/init
      - cloudrun/create_gke_cluster:
          cluster-name: "example-cluster-${CIRCLE_BUILD_NUM}"
          machine-type: "n1-standard-4"
          zone: "us-east1"
          enable-stackdriver-kubernetes: true
          scopes: "cloud-platform"
      - cloudrun/build:
          tag: "gcr.io/${GOOGLE_PROJECT_ID}/test-${CIRCLE_SHA1}"
          source: ./sample
      - cloudrun/deploy:
          platform: "gke"
          cluster: "example-cluster-${CIRCLE_BUILD_NUM}"
          image: "gcr.io/${GOOGLE_PROJECT_ID}/test-${CIRCLE_SHA1}"
          cluster-location: "us-east1"
          service-name: "example-service-${CIRCLE_BUILD_NUM}"
      - cloudrun/delete_gke_cluster:
          zone: "us-east1"
          cluster-name: "example-cluster-${CIRCLE_BUILD_NUM}"

  integration_test_managed:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - cloudrun/init
      - run:
          name: Check contents of current directory
          command: |
            pwd
            ls -lah
      - cloudrun/build:
          tag: "gcr.io/${GOOGLE_PROJECT_ID}/test-${CIRCLE_SHA1}"
          source: ./sample
      - cloudrun/deploy:
          platform: managed
          image: "gcr.io/${GOOGLE_PROJECT_ID}/test-${CIRCLE_SHA1}"
          service-name: "example-service"
          region: "us-east1"
          unauthenticated: true
      - run:
          name: Test managed deployed service.
          command: |
            GCP_API_RESULTS=$(curl -s "$GCP_DEPLOY_ENDPOINT")
            if [ "$GCP_API_RESULTS" != "Hello World!" ]; then
              echo "Result is unexpected"
              echo 'Result: '
              curl -s "$GCP_DEPLOY_ENDPOINT"
              exit 1;
            fi

workflows:
  test-pack:
    unless: << pipeline.parameters.run-integration-tests >>
    jobs:
      - orb-tools/lint # Lint Yaml files
      - orb-tools/pack # Pack orb source
      # TODO: include shell
      # Publish development version(s) of the orb.
      - orb-tools/publish-dev:
          orb-name: circleci/gcp-cloud-run
          context: orb-publisher # A restricted context containing your private publishing credentials. Will only execute if approved by an authorized user.
          requires:
            - orb-tools/lint
            - orb-tools/pack
      # Trigger an integration workflow to test the
      # dev:${CIRCLE_SHA1:0:7} version of your orb
      - orb-tools/trigger-integration-tests-workflow:
          name: trigger-integration-dev
          context: orb-publisher
          requires:
            - orb-tools/publish-dev

  # this `integration-tests_prod-release` workflow will ignore commits
  # it is only triggered by git tags, which are created in the job above
  integration-tests_prod-release:
    jobs:
      - integration_test_gke:
          context: orb-publisher

      - integration_test_managed:
          context: orb-publisher

      # Publish a semver version of the orb. relies on
      # the commit subject containing the text "[semver:patch|minor|major|skip]"
      # as that will determine whether a patch, minor or major
      # version will be published or if publishing should
      # be skipped.
      # e.g. [semver:patch] will cause a patch version to be published.
      - orb-tools/dev-promote-prod-from-commit-subject:
          orb-name: circleci/gcp-cloud-run
          context: orb-publisher
          add-pr-comment: true
          fail-if-semver-not-indicated: true
          publish-version-tag: true
          bot-user: orb-pubisher
          ssh-fingerprints: "c8:62:58:86:3a:ce:3c:5f:49:1b:0c:24:0c:bb:9a:b0"
          requires:
            - integration_test_gke
            - integration_test_managed
          filters:
            branches:
              only:
                - /master-.*/
